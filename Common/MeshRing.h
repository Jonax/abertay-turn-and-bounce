//////////////////////////////////////////////////////////////////////////////////////////
//								 "Turn & Bounce" Prototype								//
//					   Written 2007 by Jon Wills (jonaxc@gmail.com)						//
//				  Written for a Win32 environment using the Direct3D API.				//
//																						//
//				   Written at the University of Abertay Dundee, Scotland				//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//	RING BLOCK CLASS MODULE																//
//	The datatype class to handle a block of the game's ring system.  The class is		//
//	derived from the Direct3D mesh class and also includes extra data & functions		//
//	specific to the ring.																//
//////////////////////////////////////////////////////////////////////////////////////////
#ifndef _MESHRING_H_
#define _MESHRING_H_

//////////////////////////////////////////////////////////////////////////////////////////
//	LIBRARY INCLUDES
//	The libraries & namespaces required for the module.  
//////////////////////////////////////////////////////////////////////////////////////////
#include "D3DMesh.h"	// Direct3D Mesh datatype class.  

//////////////////////////////////////////////////////////////////////////////////////////
//	CLASS HEADER
//	Declaration of all required class methods and data.  The code for the methods is 
//	detailed in the module's source file.  
//////////////////////////////////////////////////////////////////////////////////////////
class RingBlock : public D3DMesh
{
	public:
		RingBlock(float displacement);	// Class constructor.  

		void Render();					// Renders the block.  

		void RotationY(float rad);		// Rotates the block around the y-axis.  

	//////////////////////////////////////////////////////////////////////////////////////
	//	CLASS OBJECTS
	//////////////////////////////////////////////////////////////////////////////////////
	private:
		D3DXMATRIX	Rotation;			// Matrix to store values for the rotation.  

	//////////////////////////////////////////////////////////////////////////////////////
	//	CLASS DATA
	//////////////////////////////////////////////////////////////////////////////////////
		float		displacement;		// Stores how far along the ring the specific
										// block is (stored in radians).  
};

#endif