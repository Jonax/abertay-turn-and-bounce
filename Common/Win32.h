//////////////////////////////////////////////////////////////////////////////////////////
//								 "Turn & Bounce" Prototype								//
//					   Written 2007 by Jon Wills (jonaxc@gmail.com)						//
//				  Written for a Win32 environment using the Direct3D API.				//
//																						//
//				   Written at the University of Abertay Dundee, Scotland				//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//	WIN32 WINDOW MODULE																	//
//	Class used handling the Win32 window.												//
//////////////////////////////////////////////////////////////////////////////////////////
#ifndef _WIN32_H_
#define _WIN32_H_

//////////////////////////////////////////////////////////////////////////////////////////
//	LIBRARY INCLUDES
//	The libraries & namespaces required for the module.  
//////////////////////////////////////////////////////////////////////////////////////////
#include <windows.h>		// Standard Win32 library.  
#include "Defines.h"		// Library for the project's definitions & macros.  
#include "Singleton.h"		// Singleton class.

//////////////////////////////////////////////////////////////////////////////////////////
//	MODULE DEFINES
//	Simplifies the call for the module.  
//////////////////////////////////////////////////////////////////////////////////////////
#define Win32	Wind32::GetSingleton()

//////////////////////////////////////////////////////////////////////////////////////////
//	CLASS HEADER
//	Declaration of all required class methods and data.  The code for the methods is 
//	detailed in the module's source file.  
//////////////////////////////////////////////////////////////////////////////////////////
class Wind32 : public CSingleton<Wind32>
{
	public:
		Wind32();	// Class constructor.  

		// Initialises the window.  
		HWND InitialiseWindow(int w, int h, HINSTANCE instance, int nCmdShow);
		// Main processor of Win32 messages.  
		LRESULT CALLBACK MessageHandler(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);
		// Processes Win32 messages from the message handler.  
		void ProcessInput(UINT message);
};

#endif